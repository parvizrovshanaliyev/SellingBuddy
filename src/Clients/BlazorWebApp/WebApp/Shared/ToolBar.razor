@using WebApp.Application.Services.Identity
@using WebApp.Application.Services.Interfaces
@using WebApp.Infrastructure

<div class="toolbar">
    @if (isAuthenticated)
    {
        <a href="basket" class="toolbar-link">@IdentityService.GetUserName() - Basket (@basketItemCount)</a>
        <a class="toolbar-link" @onclick="HandleLogout">Logout</a>
    }
    else
    {
        <a class="toolbar-link" @onclick="HandleLogin">Login</a>
    }
</div>

@code {

    [Inject]
    private IIdentityService IdentityService { get; set; } = default!;

    [Inject]
    private IBasketService BasketService { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;
    
    [Inject] 
    AppStateManager AppState { get; set; } = default!;

    private bool isAuthenticated=false;
    private int basketItemCount = 0;
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            AppState.StateChanged += async (source, propertyName) => await AppState_StateChanged(source, propertyName);
        }
    }

    /// <summary>
    /// Initialize authentication status and other necessary data.
    /// </summary>
    protected override void OnInitialized()
    {
        // Initialize authentication status and other data
        isAuthenticated = IdentityService.IsAuthenticated;
    }

    /// <summary>
    /// Navigate to the login page.
    /// </summary>
    private void HandleLogin()
    {
        NavigateTo("login");
    }

    /// <summary>
    /// Logout the user and navigate to the login page.
    /// </summary>
    private void HandleLogout()
    {
        IdentityService.Logout();
        isAuthenticated = false; // Update UI after logout
        StateHasChanged(); // Force a re-render to reflect the changes
        NavigateTo("login");
    }

    /// <summary>
    /// Navigate to a specified page, with an optional return URL.
    /// </summary>
    private void NavigateTo(string page)
    {
        var returnUrl = Uri.EscapeDataString(NavigationManager.Uri);
        NavigationManager.NavigateTo($"{page}?returnUrl={returnUrl}", forceLoad: false);
    }

    

    private async Task AppState_StateChanged(ComponentBase source, string propertyName)
    {
        if (source == this) return;

        if (propertyName == "increase")
        {
            basketItemCount++;
        }
        else if (propertyName == "updatebasket")
        {
            await calculateBasketItemCount();
        }
        else if (propertyName == "login")
        {
            await calculateBasketItemCount();
        }
        else if (propertyName == "logout")
        {
            isAuthenticated = IdentityService.IsAuthenticated;
            basketItemCount = 0;
        } 

        await InvokeAsync(StateHasChanged);
    }
    
    private async Task<int> calculateBasketItemCount()
    {
        isAuthenticated = IdentityService.IsAuthenticated;
        
        if(!isAuthenticated)
        {
            return 0;
        }
        
        var basket = await BasketService.GetBasketAsync();
        var count = basket?.Items == null ? 0 : basket.Items.Sum (i => i.Quantity);
        basketItemCount = count;
        
        return count;
    }
    
    

}
